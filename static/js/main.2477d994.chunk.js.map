{"version":3,"sources":["components/EmployeeContainer.jsx","components/Header.jsx","utils/API.js","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeContainer","props","employees","className","onClick","sorted","map","employee","index","key","name","first","last","phone","email","Header","Component","axios","get","Search","type","placeholder","value","search","onChange","inputChange","filterEmployees","App","state","filteredEmployees","createEmployees","API","then","response","setState","data","results","catch","err","console","log","sortEmployees","sortedEmployees","sort","a","b","handleInputChange","e","target","handleSubmit","preventDefault","searchTerm","toLowerCase","wholeEmployeeList","filter","includes","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iPA8BeA,EA3BW,SAACC,GAAW,IAC7BC,EAAcD,EAAdC,UACR,OACC,yBAAKC,UAAU,aACd,2BAAOA,UAAU,uBAChB,2BAAOA,UAAU,eAChB,4BACC,wBAAIC,QAASH,EAAMI,QAAnB,QACA,qCACA,uCAIF,+BACiBH,GAAaA,EAAUI,KAAI,SAACC,EAAUC,GAAX,OAC5B,wBAAIC,IAAKD,GACL,4BAAKD,EAASG,KAAKC,MAAnB,IAA2BJ,EAASG,KAAKE,MACzC,4BAAKL,EAASM,OACd,4BAAKN,EAASO,eCJvBC,E,uKAbP,OACI,yBAAKZ,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,kBACA,uBAAGA,UAAU,QAAb,yG,GANCa,a,iBCAN,EACC,WACZ,OAAOC,IAAMC,IAAI,0CCwBNC,EA1BA,SAAClB,GACf,OACC,yBAAKE,UAAU,aACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,OACd,8BACC,yBAAKA,UAAU,cACd,2BACCiB,KAAK,OACLjB,UAAU,eACckB,YAAY,wBACZX,KAAK,SACLY,MAAOrB,EAAMsB,OACbC,SAAUvB,EAAMwB,cAExB,4BAAQrB,QAASH,EAAMyB,gBAAiBN,KAAK,SAASjB,UAAU,mBAAhE,gBCsETwB,E,4MA9EdC,MAAQ,CACP1B,UAAW,GACX2B,kBAAmB,GACnBN,OAAQ,I,EAQTO,gBAAkB,WACjBC,IACEC,MAAK,SAACC,GAAD,OACL,EAAKC,SAAS,CACbhC,UAAW+B,EAASE,KAAKC,QACzBP,kBAAmBI,EAASE,KAAKC,aAGlCC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,O,EAG9BG,cAAgB,WAQf,IAAMC,EAAkB,EAAKd,MAAM1B,UAAUyC,MAP7C,SAAiBC,EAAGC,GACnB,OAAID,EAAElC,KAAKC,MAAQkC,EAAEnC,KAAKC,MAAc,EACpCkC,EAAEnC,KAAKC,MAAQiC,EAAElC,KAAKC,OAAe,EAElC,KAIR,EAAKuB,SAAS,CAAEhC,UAAWwC,K,EAG5BI,kBAAoB,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAlBtC,EADkB,EAClBA,KAAMY,EADY,EACZA,MACd,EAAKY,SAAL,eACExB,EAAOY,IAIT,EAAKI,mB,EAGNuB,aAAe,SAACF,GACfA,EAAEG,iBACF,EAAKxB,mB,EAGNA,gBAAkB,WACjB,IAAMyB,EAAa,EAAKvB,MAAML,OAAO6B,cACjCC,EAAmB,EAAKzB,MAAM1B,UAClC,EAAKgC,SAAS,CACbL,kBAAmBwB,EAAkBC,QAAO,SAAC/C,GAAD,OAC3CA,EAASG,KAAKC,MAAMyC,cAAcG,SAASJ,S,kEA/C7CK,KAAK1B,oB,+BAsDL,OACC,yBAAK3B,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CACCoB,OAAQiC,KAAK5B,MAAML,OACnBE,YAAa+B,KAAKV,kBAClBpB,gBAAiB8B,KAAKP,eAEvB,kBAAC,EAAD,CACC/C,UAAWsD,KAAK5B,MAAMC,kBACtBxB,OAAQmD,KAAKf,qB,GAzEAzB,aCKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.2477d994.chunk.js","sourcesContent":["import React from 'react';\n\n//pass in props\nconst EmployeeContainer = (props) => {\n\tconst { employees } = props\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<table className=\"table table-striped\">\n\t\t\t\t<thead className=\"thead-light\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th onClick={props.sorted}>Name</th>\n\t\t\t\t\t\t<th>Phone</th>\n\t\t\t\t\t\t<th>Email</th>\n\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    {employees && employees.map((employee, index) => (\n                    <tr key={index}>\n                        <th>{employee.name.first} {employee.name.last}</th>\n                        <td>{employee.phone}</td>\n                        <td>{employee.email}</td>\n                    </tr>\n                    ))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n};\n\nexport default EmployeeContainer;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className='jumbotron jumbotron-fluid'>\n                <div className='container'>\n                    <h1 className='display-3'>User Directory</h1>\n                    <p className='lead'>\n                        Click Name to sort the list alphabetically, or enter a name in the search box to narrow results\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header","import axios from \"axios\";\n\nexport default {\n  getEmployees: () => {\n    return axios.get(\"https://randomuser.me/api/?results=15\");\n  },\n};","import React from 'react';\n\nconst Search = (props) => {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n                                placeholder='Search by first name:'\n                                name='search'\n                                value={props.search}\n                                onChange={props.inputChange}\t\n\t\t\t\t\t\t\t/>\n                        <button onClick={props.filterEmployees} type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Search;\n","import React, { Component } from 'react';\nimport EmployeeContainer from './components/EmployeeContainer';\nimport Header from './components/Header';\nimport API from './utils/API';\nimport Search from './components/Search';\n// import Search from './components/Search'\n\nclass App extends Component {\n\t//set state to empty array of users and filtered array of users\n\tstate = {\n\t\temployees: [],\n\t\tfilteredEmployees: [],\n\t\tsearch: '',\n\t};\n\t//set users array to pull from api on page load\n\tcomponentDidMount() {\n\t\tthis.createEmployees();\n\t\t// this.sortEmployees()\n\t}\n\t//function to generate employees w/ api call and then update the state of the user array with results\n\tcreateEmployees = () => {\n\t\tAPI.getEmployees()\n\t\t\t.then((response) =>\n\t\t\t\tthis.setState({ \n\t\t\t\t\temployees: response.data.results,\n\t\t\t\t\tfilteredEmployees: response.data.results\n\t\t\t\t})\n\t\t\t)\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\tsortEmployees = () => {\n\t\tfunction compare(a, b) {\n\t\t\tif (a.name.first > b.name.first) return 1;\n\t\t\tif (b.name.first > a.name.first) return -1;\n\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst sortedEmployees = this.state.employees.sort(compare);\n\t\tthis.setState({ employees: sortedEmployees });\n\t};\n\n\thandleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t\t\n\t\t});\n\t\n\t\tthis.filterEmployees();\n\t};\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.filterEmployees();\n\t};\n\n\tfilterEmployees = () => {\n\t\tconst searchTerm = this.state.search.toLowerCase();\n\t\tlet wholeEmployeeList= this.state.employees\n\t\tthis.setState({\n\t\t\tfilteredEmployees: wholeEmployeeList.filter((employee) =>\n\t\t\t\temployee.name.first.toLowerCase().includes(searchTerm)\n\t\t\t),\n\t\t});\n\t};\n\n\t//render EmployeeContainer and components to page on load\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<Search\n\t\t\t\t\tsearch={this.state.search}\n\t\t\t\t\tinputChange={this.handleInputChange}\n\t\t\t\t\tfilterEmployees={this.handleSubmit}\n\t\t\t\t/>\n\t\t\t\t<EmployeeContainer\n\t\t\t\t\temployees={this.state.filteredEmployees}\n\t\t\t\t\tsorted={this.sortEmployees}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}